#!crnn/rnn.py
# kate: syntax python;

import os
from Util import get_login_username
demo_name, _ = os.path.splitext(__file__)
print("Hello, experiment: %s" % demo_name)

# task
use_tensorflow = True
task = "train"

# data
#train = {"class": "TaskEpisodicCopyDataset", "num_seqs": 1000}
#num_inputs = 10
#num_outputs = 10
train = {"class": "TaskXmlModelingDataset", "num_seqs": 1000}
num_inputs = 12
num_outputs = 12

dev = train.copy()
dev.update({"num_seqs": train["num_seqs"] // 10, "fixed_random_seed": 42})

# network
# (also defined by num_inputs & num_outputs)
network = {
    "input": {"class": "rec", "unit": "standardlstm", "n_out": 20, "L2": 0.01},
    "input_last": {"class": "get_last_hidden_state", "from": "input", "n_out": 40},

    "output": {"class": "rec", "from": [], "unit": {
        "output_embed": {"class": "linear", "activation": None, "from": "output", "n_out": 10},
        "s": {"class": "rnn_cell", "unit": "standardlstm", "from": ["prev:output_embed", "base:input_last"], "n_out": 20},
        "prob": {"class": "softmax", "from": "s", "target": "classes", "loss": "ce"},
        "output": {"class": "choice", "from": "prob", "target": "classes", "beam_size": 8}
    }, "target": "classes"}
}

debug_print_layer_output_template = True

# trainer
batching = "random"
batch_size = 5000
max_seqs = 40
chunking = "0"
adam = True
gradient_noise = 0.3
learning_rate = 0.0005
learning_rate_control = "newbob"
learning_rate_control_relative_error_relative_lr = True
model = "/tmp/%s/crnn/%s/model" % (get_login_username(), demo_name)  # https://github.com/tensorflow/tensorflow/issues/6537
num_epochs = 100
save_interval = 20

# log
log_verbosity = 5

