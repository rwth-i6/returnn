#!returnn.py
# kate: syntax python;

import os
demo_name, _ = os.path.splitext(__file__)
print("Hello, experiment: %s" % demo_name)

n_cluster = 2

task = "train"
ax_dataset = {"class": "Task12AXDataset", "num_seqs": 1000}
train = {"class": "ClusteringDataset", "dataset": ax_dataset, "cluster_map_file" : "/u/kitza/experiments/00-resources/returnn-dev/demos/12AX.cluster_map", "n_clusters" : n_cluster}
dev = {"class": "Task12AXDataset", "num_seqs": 100, "fixed_random_seed": 1}

num_inputs = 9
#num_outputs = 2
num_outputs = {"data" : [num_inputs,2], "classes" : [2,1], "cluster_idx" : [n_cluster, 1]}
batching = "random"
batch_size = 5000
max_seqs = 10
chunking = "200:200"

subnet = {
"fw1": {"class": "forward", "n_out": 30},
"output" : {"class": "forward", "n_out": 10, "activation": "identity", "from" : ["fw1"]}
}

network = {
"fw0": {"class": "forward", "n_out": 20},
"cluster_key_source_layer" : {"class" : "source", "data_key" : "cluster_idx", "dtype" : "int32", "n_out" : n_cluster, "from" : "null", "sparse" : True},
"sub" : {"class" : "clustersubnet", "n_out" : 10, "subnetwork" : subnet, "n_clusters" : n_cluster, "from" : ["fw0","cluster_key_source_layer"]},
"output": {"class": "softmax", "loss": "ce", "from": ["sub"]}
}

# training
adam = True
learning_rate = 0.01
model = "/tmp/returnn.%s.network" % demo_name
num_epochs = 100
save_interval = 20
gradient_clip = 0

# log
#log = "./subnetwork.log"
log_verbosity = 4
