name: CI

on:
  push:
    branches:
      - master
      - main
  pull_request:
  workflow_dispatch:

jobs:
  pycharm-inspect:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - 3.7
        tf-version:
          # Below we have a newer TF version for the TF tests.
          # However, it seems somewhat broken for the inspections,
          # so we keep this older TF version for now just for the inspections.
          - 2.4.2

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache
          ~/.local
        key: cache-${{ runner.os }}-py${{ matrix.python-version }}-tf${{ matrix.tf-version }}
        restore-keys: |
          cache-${{ runner.os }}-py${{ matrix.python-version }}-

    - name: Setup dependencies
      run: |
        echo "PATH=$PATH:~/.local/bin" >> $GITHUB_ENV
        echo "Python ${{matrix.python-version}}"
        echo "pip: $(type pip)"

        pip install --user --upgrade pip setuptools wheel
        pip install --user typing | cat  # needed for Python 2 in some cases

        pip install --user pytest
        pip install --user nose

        pip install --user -r requirements.txt | cat
        pip install --user --upgrade tensorflow==${{ matrix.tf-version }} | cat
        pip install --user torch==1.12 | cat

    - name: Test Python/Numpy/TF versions.
      run: |
        echo "Python env: $(type python) $(python --version)"
        python -c "import numpy; print('NumPy:', numpy.version.full_version)"
        python -c "import tensorflow as tf; print('TensorFlow:', tf.__git_version__, tf.__version__, tf.__file__)"
        python -c "import tensorflow as tf; assert tf.__version__ == '${{ matrix.tf-version }}'"

    - name: Cache PyCharm
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/JetBrains
        key: cache-pycharm-${{ runner.os }}-py${{ matrix.python-version }}-tf${{ matrix.tf-version }}

    - name: Run PyCharm inspect
      run: |
        tests/pycharm-inspect.py

  base-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - 3.7
        action:
          - TEST=Dataset
          - TEST=fork_exec
          - TEST=GeneratingDataset
          - TEST=hdf_dump
          - TEST=HDFDataset
          - TEST=LearningRateControl
          - TEST=Pretrain
          - TEST=SprintDataset
          - TEST=TaskSystem
          - TEST=TaskSystem_SharedMem
          - TEST=TranslationDataset
          - TEST=Util
        include:
          - action: TEST=SprintDataset
            python-version: 2.7

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v2
      with:
        python-version: 2.7
      if: matrix.python-version != 2.7

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache
          ~/.local
        key: cache-${{ runner.os }}-py${{ matrix.python-version }}-no-tf
        restore-keys: |
          cache-${{ runner.os }}-py${{ matrix.python-version }}-

    - name: Setup dependencies
      run: |
        echo "PATH=$PATH:~/.local/bin" >> $GITHUB_ENV
        echo "Python ${{matrix.python-version}}"
        echo "pip: $(type pip)"
        echo "pip2: $(type pip2)"

        pip2 install -qq --upgrade pip setuptools wheel six | cat  # Python2<->Python3
        pip2 install --user -r requirements.txt | cat  # need for Python2<->Python3 communication tests
        pip2 install --user typing | cat

        pip install --user --upgrade pip setuptools wheel
        pip install --user typing | cat  # needed for Python 2 in some cases

        if [[ "${{matrix.python-version}}" == 2.* ]]; then
          # pytest does not support Python <3.7, so we use nose instead.
          pip install --user nose
        fi

        if [[ "${{matrix.python-version}}" == 3.* ]]; then
          pip install --user pytest

          # Install nose anyway because we currently use some of its helper functions.
          pip install --user nose
        fi

        pip install --user -r requirements.txt | cat

    - name: Test Python/Numpy/TF versions.
      run: |
        echo "Python env: $(type python) $(python --version)"
        python -c "import numpy; print('NumPy:', numpy.version.full_version)"

        if [[ "${{matrix.python-version}}" == 2.* ]]; then
          echo "Nosetests env:"
          python -m nose -V
        else
          echo "Pytest env:"
          python -m pytest -V
        fi

    - name: Run test
      run: |
        export ${{ matrix.action }}
        if [[ "${{matrix.python-version}}" == 2.* ]]; then
          python -m nose tests/test_$TEST.py
        else
          python -m pytest tests/test_$TEST.py
        fi

  tf-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - 3.7
        tf-version:
          - 2.10.0
        action:
          - TEST=Config
          - TEST=Fsa
          - TEST=Log
          - TEST=SprintInterface
          - TEST=TFEngine
          - TEST=TFNativeOp
          - TEST=TFNetworkLayer
          - TEST=TFNetworkRecLayer
          - TEST=TFUpdater
          - TEST=TFUtil
          - TEST=tools
        include:
          - action: TEST=TFUtil
            python-version: 2.7
            tf-version: 1.14.0
          - action: TEST=TFUtil
            python-version: 3.7
            tf-version: 1.15.3
          - action: TEST=TFEngine
            python-version: 2.7
            tf-version: 1.15.0
          - action: TEST=TFEngine
            python-version: 3.7
            tf-version: 1.15.3
          - action: TEST=TFEngine
            python-version: 3.7
            tf-version: 2.3.0
          - action: TEST=TFNativeOp
            python-version: 2.7
            tf-version: 1.4.0
          - action: TEST=TFNativeOp
            python-version: 3.6
            tf-version: 1.8.0
          - action: TEST=TFNativeOp
            python-version: 3.7
            tf-version: 1.14.0
          - action: TEST=TFNetworkSigProcLayer
            python-version: 3.7
            tf-version: 1.15.3
          - action: TEST=demos
            python-version: 3.6
            tf-version: 2.3.0

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v2
      with:
        python-version: 2.7
      if: matrix.python-version != 2.7

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache
          ~/.local
        key: cache-${{ runner.os }}-py${{ matrix.python-version }}-tf${{ matrix.tf-version }}
        restore-keys: |
          cache-${{ runner.os }}-py${{ matrix.python-version }}-

    - name: Setup dependencies
      run: |
        echo "PATH=$PATH:~/.local/bin" >> $GITHUB_ENV
        echo "Python ${{matrix.python-version}}"
        echo "pip: $(type pip)"
        echo "pip2: $(type pip2)"

        pip2 install -qq --upgrade pip setuptools wheel six | cat  # Python2<->Python3
        pip2 install --user -r requirements.txt | cat  # need for Python2<->Python3 communication tests
        pip2 install --user typing | cat

        pip install --user --upgrade pip setuptools wheel
        pip install --user typing | cat  # needed for Python 2 in some cases

        if [[ "${{matrix.python-version}}" == 2.* ]]; then
          echo "Cleaning ub potential messed up tensorboard for Python 2.7."
          echo "Current site-packages:"
          ls ~/.local/lib/python2.7/site-packages
          # https://github.com/tensorflow/tensorboard/issues/1862#issuecomment-521876133
          rm -rf ~/.local/lib/python2.7/site-packages/tensorboard* || true

          # Newer protobuf (3.18.0) seems be broken for Python 2
          # and TF just adds protobuf>=3.3 as dependency.
          pip install --user protobuf==3.12

          # pytest does not support Python <3.7, so we use nose instead.
          pip install --user nose
        fi

        if [[ "${{matrix.python-version}}" == 3.* ]]; then
          pip install --user pytest

          # Install nose anyway because we currently use some of its helper functions.
          pip install --user nose
        fi

        if [[ "${{matrix.python-version}}" == 3.* ]]; then
          if [[ "${{matrix.tf-version}}" == 2.[0123].* || "${{matrix.tf-version}}" == 1.* ]]; then
            # Older TF needs older NumPy version.
            # https://github.com/rwth-i6/returnn/pull/1160#issuecomment-1284537803
            pip install --user numpy==1.19.5
          fi
        fi
        pip install --user -r requirements.txt | cat
        pip install --user scipy | cat  # for some tests
        pip install --user --upgrade tensorflow==${{ matrix.tf-version }} | cat

    - name: Test Python/Numpy/TF versions.
      run: |
        echo "Python env: $(type python) $(python --version)"
        python -c "import numpy; print('NumPy:', numpy.version.full_version)"
        python -c "import tensorflow as tf; print('TensorFlow:', tf.__git_version__, tf.__version__, tf.__file__)"
        python -c "import tensorflow as tf; assert tf.__version__ == '${{ matrix.tf-version }}'"

        if [[ "${{matrix.python-version}}" == 2.* ]]; then
          echo "Nosetests env:"
          python -m nose -V
        else
          echo "Pytest env:"
          python -m pytest -V
        fi

    - name: Run test
      run: |
        export ${{ matrix.action }}
        if [[ "${{matrix.python-version}}" == 2.* ]]; then
          python -m nose tests/test_$TEST.py
        else
          python -m pytest tests/test_$TEST.py
        fi
